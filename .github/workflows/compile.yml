name: Build

on:
  workflow_call:
    inputs:
      PROJECT_NAME:
        type: string
        required: true
        default: "template"
        description: "The Project to compile. This should be the same value as you set in the premake5.lua"
      USE_PREFIX:
        type: string
        required: false
        default: "true"
        description: "If enabled, it will use the gm[realm]_[Project]_[platform].[extension] format. Else, it will just use [Project].[extension] name."
      BUILD_64x:
        type: string
        required: false
        default: "false"
        description: "If enabled, the Project is also compiled for the 64x"
      BUILD_32x:
        type: string
        required: false
        default: "true"
        description: "If enabled, the Project is also compiled for the 32x"
      BUILD_WINDOWS:
        type: string
        required: false
        default: "true"
        description: "If enabled, the Project is compiled for Windows"
      BUILD_LINUX:
        type: string
        required: false
        default: "true"
        description: "If enabled, the Project is compiled for Linux"
      REALM:
        type: string
        required: false
        default: "sv"
        description: "The Realm this module is compiled for."
      LINUX_FILEEXTENTION:
        type: string
        required: false
        default: "dll"
        description: "The File extension for Linux compiles. Used in cases where you compile a .so file."
      UPLOAD:
        type: string
        required: false
        default: "artifact"
        description: "How the result should be uploaded. Can be sftp or artifact. Only works for Linux."
      UPLOAD_PATH:
        type: string
        required: false
        default: "garrysmod/lua/bin/"
        description: "If UPLOAD is set to SFTP, it will upload the result in the given directory."
      UPLOAD_PDB:
        type: string
        required: false
        default: "false"
        description: "If enabled, the .pdb file will also be uploaded."
      SFTP_IP:
        type: string
        required: false
        default: ""
        description: "The IP of the SFTP server."
      SFTP_PORT:
        type: string
        required: false
        default: 22
        description: "The Port of the SFTP server."
      SFTP_USER:
        type: string
        required: false
        default: ""
        description: "The user for the SFTP server."
      SFTP_PASSWORD:
        type: string
        required: false
        default: ""
        description: "The password to use for the SFTP server."
      SFTP_PRIVATE_KEY:
        type: string
        required: false
        description: "The Private Key to use for the SFTP server. Leave this empty to use a password."
      GARRYSMOD_COOMON:
        type: string
        required: false
        default: "danielga/garrysmod_common"
        description: "The garrysmod_common repository to use. Useful if you have a custom one you want to use."
      GARRYSMOD_COOMON_BRANCH:
        type: string
        required: false
        default: "master"
        description: "The garrysmod_common branch to use."
      GARRYSMOD_COOMON_64XBRANCH:
        type: string
        required: false
        default: "x86-64-support-sourcesdk"
        description: "The garrysmod_common branch to use for the 64x compiles."
      SOURCESDK_MINIMAL:
        type: string
        required: false
        default: "danielga/sourcesdk-minimal"
        description: "The sourcesdk-minimal repository to use. Useful if you have a custom one you want to use."
      SOURCESDK_MINIMAL_BRANCH:
        type: string
        required: false
        default: "master"
        description: "The sourcesdk-minimal branch to use."
      SOURCESDK_MINIMAL_64XBRANCH:
        type: string
        required: false
        default: "x86-64-branch"
        description: "The sourcesdk-minimal branch to use for the 64x compiles."
      SCANNING:
        type: string
        required: false
        default: "danielga/scanning"
        description: "The scanning repository to use."
      SCANNING_BRANCH:
        type: string
        required: false
        default: "master"
        description: "The scanning branch to use."
      DETOURING:
        type: string
        required: false
        default: "danielga/detouring"
        description: "The detouring repository to use."
      DETOURING_BRANCH:
        type: string
        required: false
        default: "master"
        description: "The detouring branch to use."
env:
  PROJECT_NAME_LINUX32: ${{ format('{0}{1}{2}{3}{4}{5}{6}', inputs.USE_PREFIX == 'true' && 'gm' || '', inputs.USE_PREFIX == 'true' && inputs.REALM || '', inputs.USE_PREFIX == 'true' && '_' || '', inputs.PROJECT_NAME, inputs.USE_PREFIX == 'true' && '_linux' || '', inputs.LINUX_FILEEXTENTION) }}

jobs:
  build-linux:
    runs-on: ubuntu-latest
    container: debian:bullseye
    if: (inputs.BUILD_32x == 'true') && (inputs.BUILD_LINUX == 'true')
    steps:
    - name: Install Dependencies
      run: |
        dpkg --add-architecture i386
        apt update
        apt install -y build-essential git libstdc++6:i386 gcc-multilib g++-multilib wget
    
    - uses: actions/checkout@v3
      name: Checkout

    - uses: actions/checkout@v3
      name: Checkout garrysmod_common
      with:
        repository: ${{inputs.GARRYSMOD_COOMON}}
        ref: ${{inputs.GARRYSMOD_COOMON_BRANCH}}
        path: 'garrysmod_common'
        
    - uses: actions/checkout@v3
      name: Checkout premake-export-compile-commands
      with:
        repository: "danielga/premake-export-compile-commands"
        ref: master
        path: 'garrysmod_common/premake/premake-export-compile-commands'
        submodules: 'recursive'

    - uses: actions/checkout@v3
      name: Checkout sourcesdk-minimal
      with:
        repository: ${{inputs.SOURCESDK_MINIMAL}}
        ref: ${{inputs.SOURCESDK_MINIMAL_BRANCH}}
        path: 'garrysmod_common/sourcesdk-minimal'
        submodules: 'recursive'
        
    - uses: actions/checkout@v3
      name: Checkout scanning
      with:
        repository: ${{inputs.SCANNING}}
        ref: ${{inputs.SCANNING_BRANCH}}
        path: 'garrysmod_common/scanning'
        submodules: 'recursive'
        
    - uses: actions/checkout@v3
      name: Checkout detouring
      with:
        repository: ${{inputs.DETOURING}}
        ref: ${{inputs.DETOURING_BRANCH}}
        path: 'garrysmod_common/detouring'
        submodules: 'recursive'
        
    - name: Install Premake
      run: |
        wget https://github.com/danielga/garrysmod_common/releases/download/premake-build%2F5.0.0-beta2/premake-5.0.0-beta2-linux.tar.gz -O premake.tar.gz
        tar -xvf premake.tar.gz --directory=/usr/bin
        gcc --version

    - name: Generate Project
      run: |
        premake5 --gmcommon=garrysmod_common gmake

    - name: Make
      run: |
        cd projects/linux/gmake
        make

    - uses: actions/upload-artifact@v2
      name: Upload ${{env.PROJECT_NAME_LINUX32}} (Artifact)
      if: inputs.UPLOAD == 'artifact'
      with:
        name: ${{inputs.PROJECT_NAME_LINUX32}}
        path: projects/linux/gmake/x86/ReleaseWithSymbols/${{env.PROJECT_NAME_LINUX32}}

    - name: Upload ${{env.PROJECT_NAME_LINUX32}} (SFTP)
      if: inputs.UPLOAD == 'SFTP'
      uses: wlixcc/SFTP-Deploy-Action@v1.2.4
      with:
        username: '${{ secrets.SSH_USER }}'
        server: '${{ secrets.SSH_IP }}'
        ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
        local_path: 'projects/linux/gmake/x86/ReleaseWithSymbols/${{env.PROJECT_NAME_LINUX32}}'
        remote_path: '${{ env.UPLOAD_PATH }}'
        sftpArgs: '-o ConnectTimeout=5'
        password: '${{ secrets.SSH_PASSWORD }}'

  build-linux-64x:
    runs-on: ubuntu-latest
    container: debian:bullseye
    if: (inputs.BUILD_64x == 'true') && (inputs.BUILD_LINUX == 'true')
    steps:
    - name: Install Dependencies
      run: |
        dpkg --add-architecture i386
        apt update
        apt install -y build-essential git libstdc++6:i386 gcc-multilib g++-multilib wget
    
    - uses: actions/checkout@v3
      name: Checkout

    - uses: actions/checkout@v3
      name: Checkout garrysmod_common
      with:
        repository: ${{inputs.GARRYSMOD_COOMON}}
        ref: ${{inputs.GARRYSMOD_COOMON_64XBRANCH}}
        path: 'garrysmod_common'
        
    - uses: actions/checkout@v3
      name: Checkout premake-export-compile-commands
      with:
        repository: "danielga/premake-export-compile-commands"
        ref: master
        path: 'garrysmod_common/premake/premake-export-compile-commands'
        submodules: 'recursive'
        
    - uses: actions/checkout@v3
      name: Checkout sourcesdk-minimal
      with:
        repository: ${{inputs.SOURCESDK_MINIMAL}}
        ref: ${{inputs.SOURCESDK_MINIMAL_64XBRANCH}}
        path: 'garrysmod_common/sourcesdk-minimal'
        submodules: 'recursive'
        
    - uses: actions/checkout@v3
      name: Checkout scanning
      with:
        repository: ${{inputs.SCANNING}}
        ref: ${{inputs.SCANNING_BRANCH}}
        path: 'garrysmod_common/scanning'
        submodules: 'recursive'
        
    - uses: actions/checkout@v3
      name: Checkout detouring
      with:
        repository: ${{inputs.DETOURING}}
        ref: ${{inputs.DETOURING_BRANCH}}
        path: 'garrysmod_common/detouring'
        submodules: 'recursive'
        
    - name: Install Premake
      run: |
        wget https://github.com/danielga/garrysmod_common/releases/download/premake-build%2F5.0.0-beta2/premake-5.0.0-beta2-linux.tar.gz -O premake.tar.gz
        tar -xvf premake.tar.gz --directory=/usr/bin
        gcc --version

    - name: Generate Project
      run: |
        premake5 --gmcommon=garrysmod_common gmake

    - name: Make 64x
      run: |
        cd projects/linux/gmake
        make config=releasewithsymbols_x86_64

    - uses: actions/upload-artifact@v2
      name: Upload gm${{inputs.REALM}}_${{inputs.PROJECT_NAME}}_linux64.${{inputs.LINUX_FILEEXTENTION}} (Artifact)
      if: inputs.UPLOAD == 'artifact' && inputs.USE_PREFIX == 'true'
      with:
        name: gm${{inputs.REALM}}_${{inputs.PROJECT_NAME}}_linux64.${{inputs.LINUX_FILEEXTENTION}}
        path: projects/linux/gmake/x86_64/ReleaseWithSymbols/gm${{inputs.REALM}}_${{inputs.PROJECT_NAME}}_linux64.${{inputs.LINUX_FILEEXTENTION}}

    - name: Upload gm${{inputs.REALM}}_${{inputs.PROJECT_NAME}}_linux64.${{inputs.LINUX_FILEEXTENTION}} (SFTP)
      if: inputs.UPLOAD == 'SFTP' && inputs.USE_PREFIX == 'true'
      uses: wlixcc/SFTP-Deploy-Action@v1.2.4
      with:
        username: '${{ secrets.SSH_USER }}'
        server: '${{ secrets.SSH_IP }}'
        ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
        local_path: 'projects/linux/gmake/x86_64/ReleaseWithSymbols/gm${{inputs.REALM}}_${{inputs.PROJECT_NAME}}_linux64.${{inputs.LINUX_FILEEXTENTION}}'
        remote_path: '${{ env.UPLOAD_PATH }}'
        sftpArgs: '-o ConnectTimeout=5'
        password: '${{ secrets.SSH_PASSWORD }}'
        
    - uses: actions/upload-artifact@v2
      name: Upload ${{inputs.PROJECT_NAME}}.${{inputs.LINUX_FILEEXTENTION}} (Artifact)
      if: inputs.UPLOAD == 'artifact' && inputs.USE_PREFIX == 'false'
      with:
        name: ${{inputs.PROJECT_NAME}}.${{inputs.LINUX_FILEEXTENTION}}
        path: projects/linux/gmake/x86_64/ReleaseWithSymbols/${{inputs.PROJECT_NAME}}.${{inputs.LINUX_FILEEXTENTION}}

    - name: Upload ${{inputs.PROJECT_NAME}}.${{inputs.LINUX_FILEEXTENTION}} (SFTP)
      if: inputs.UPLOAD == 'SFTP' && inputs.USE_PREFIX == 'false'
      uses: wlixcc/SFTP-Deploy-Action@v1.2.4
      with:
        username: '${{ secrets.SSH_USER }}'
        server: '${{ secrets.SSH_IP }}'
        ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
        local_path: 'projects/linux/gmake/x86_64/ReleaseWithSymbols/${{inputs.PROJECT_NAME}}.${{inputs.LINUX_FILEEXTENTION}}'
        remote_path: '${{ env.UPLOAD_PATH }}'
        sftpArgs: '-o ConnectTimeout=5'
        password: '${{ secrets.SSH_PASSWORD }}'

  build-windows:
    runs-on: windows-2019
    if: (inputs.BUILD_32x == 'true') && (inputs.BUILD_WINDOWS == 'true')
    steps:
    - uses: actions/checkout@v3
      name: Checkout

    - uses: actions/checkout@v3
      name: Checkout garrysmod_common
      with:
        repository: ${{inputs.GARRYSMOD_COOMON}}
        ref: ${{inputs.GARRYSMOD_COOMON_BRANCH}}
        path: 'garrysmod_common'
       
    - uses: actions/checkout@v3
      name: Checkout premake-export-compile-commands
      with:
        repository: "danielga/premake-export-compile-commands"
        ref: master
        path: 'garrysmod_common/premake/premake-export-compile-commands'
        submodules: 'recursive'
 
    - uses: actions/checkout@v3
      name: Checkout sourcesdk-minimal
      with:
        repository: ${{inputs.SOURCESDK_MINIMAL}}
        ref: ${{inputs.SOURCESDK_MINIMAL_BRANCH}}
        path: 'garrysmod_common/sourcesdk-minimal'
        submodules: 'recursive'
        
    - uses: actions/checkout@v3
      name: Checkout scanning
      with:
        repository: ${{inputs.SCANNING}}
        ref: ${{inputs.SCANNING_BRANCH}}
        path: 'garrysmod_common/scanning'
        submodules: 'recursive'
        
    - uses: actions/checkout@v3
      name: Checkout detouring
      with:
        repository: ${{inputs.DETOURING}}
        ref: ${{inputs.DETOURING_BRANCH}}
        path: 'garrysmod_common/detouring'
        submodules: 'recursive'

    - name: Install Premake
      run: |
         curl -L https://github.com/danielga/garrysmod_common/releases/download/premake-build%2F5.0.0-beta2/premake-5.0.0-beta2-windows.zip -o premake.zip
         tar -xf premake.zip

    - name: Generate Project
      run: |
        ./premake5.exe --gmcommon=garrysmod_common vs2019

    - name: Build
      run: |
        cd projects/windows/vs2019
        & "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\msbuild.exe" /p:Configuration=ReleaseWithSymbols /p:Platform=Win32 ${{inputs.PROJECT_NAME}}.sln

    - uses: actions/upload-artifact@v2
      if: inputs.USE_PREFIX == 'true'
      name: Upload gm${{inputs.REALM}}_${{inputs.PROJECT_NAME}}_win32.dll (Artifact)
      with:
        name: gm${{inputs.REALM}}_${{inputs.PROJECT_NAME}}_win32.dll
        path: projects/windows/vs2019/x86/ReleaseWithSymbols/gm${{inputs.REALM}}_${{inputs.PROJECT_NAME}}_win32.dll

    - uses: actions/upload-artifact@v2
      if: inputs.USE_PREFIX == 'false'
      name: Upload ${{inputs.PROJECT_NAME}} (Artifact)
      with:
        name: ${{inputs.PROJECT_NAME}}.dll
        path: projects/windows/vs2019/x86/ReleaseWithSymbols/${{inputs.PROJECT_NAME}}.dll

  build-windows-64x:
    runs-on: windows-2019
    if: (inputs.BUILD_64x == 'true') && (inputs.BUILD_WINDOWS == 'true')
    steps:
    - uses: actions/checkout@v3
      name: Checkout

    - uses: actions/checkout@v3
      name: Checkout garrysmod_common
      with:
        repository: ${{inputs.GARRYSMOD_COOMON}}
        ref: ${{inputs.GARRYSMOD_COOMON_64XBRANCH}}
        path: 'garrysmod_common'
        
    - uses: actions/checkout@v3
      name: Checkout premake-export-compile-commands
      with:
        repository: "danielga/premake-export-compile-commands"
        ref: master
        path: 'garrysmod_common/premake/premake-export-compile-commands'
        submodules: 'recursive'
        
    - uses: actions/checkout@v3
      name: Checkout sourcesdk-minimal
      with:
        repository: ${{inputs.SOURCESDK_MINIMAL}}
        ref: ${{inputs.SOURCESDK_MINIMAL_64XBRANCH}}
        path: 'garrysmod_common/sourcesdk-minimal'
        submodules: 'recursive'
        
    - uses: actions/checkout@v3
      name: Checkout scanning
      with:
        repository: ${{inputs.SCANNING}}
        ref: ${{inputs.SCANNING_BRANCH}}
        path: 'garrysmod_common/scanning'
        submodules: 'recursive'
        
    - uses: actions/checkout@v3
      name: Checkout detouring
      with:
        repository: ${{inputs.DETOURING}}
        ref: ${{inputs.DETOURING_BRANCH}}
        path: 'garrysmod_common/detouring'
        submodules: 'recursive'

    - name: Install Premake
      run: |
         curl -L https://github.com/danielga/garrysmod_common/releases/download/premake-build%2F5.0.0-beta2/premake-5.0.0-beta2-windows.zip -o premake.zip
         tar -xf premake.zip

    - name: Generate Project
      run: |
        ./premake5.exe --gmcommon=garrysmod_common vs2019

    - name: Build
      run: |
        cd projects/windows/vs2019
        & "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\msbuild.exe" /p:Configuration=ReleaseWithSymbols /p:Platform=x64 ${{inputs.PROJECT_NAME}}.sln

    - uses: actions/upload-artifact@v2
      if: inputs.USE_PREFIX == 'true'
      name: Upload gm${{inputs.REALM}}_${{inputs.PROJECT_NAME}}_win64.dll (Artifact)
      with:
        name: gm${{inputs.REALM}}_${{inputs.PROJECT_NAME}}_win64.dll
        path: projects/windows/vs2019/x86_64/ReleaseWithSymbols/gm${{inputs.REALM}}_${{inputs.PROJECT_NAME}}_win64.dll
        
    - uses: actions/upload-artifact@v2
      if: inputs.USE_PREFIX == 'false'
      name: Upload ${{inputs.PROJECT_NAME}} (Artifact)
      with:
        name: ${{inputs.PROJECT_NAME}}.dll
        path: projects/windows/vs2019/x86_64/ReleaseWithSymbols/${{inputs.PROJECT_NAME}}.dll
